

##  接受pull request

1：找到pull request的commit id，例如abcdefg
2：下载对方pull request的代码放入新建分支new  ````git checkout 5b4d575dd66974a8eb6b84f13647e1ea3219898f -b new````
3：检查修改并合并到master分支，再提交的版本库


## fork出来的分支更新主分支上最新代码

````
 git remote add upstream git@10.45.7.208:ZSmartCity-CC-WEB/ccs.git
 git pull upstream xxx

````
## 关于pull request工作模式的文章

http://blog.jobbole.com/76854/




##  Git Submodule使用

添加submoudle

```` git submodule add http://github.com/xxx/xxx/xxx ````


初始化，更新或下载

````

    git submodule init
    git submodule update

    //遍历更新和下载
    git submodule foreach git submodule init
    git submodule foreach git submodule update

````




##  Git整理commit

````

//合并上一次的提交
git commit -a --amend -m "my message here"

//取消上一次的提交
git reset --soft HEAD^

//取消前n次的提交
$ git reset --soft HEAD~n


## git全局配置

No1.用户信息配置：

$ git config --global user.name "fp"
$ git config --global user.email "fangpeng@tbkt.cn"
如果存在多帐号，可以查看这篇博客:git初体验（七）多账户的使用。

配置完成后，可以检查是否配置成：如下列举Github的：

$ ssh -T git@github.com
Hi BeginMan! You've successfully authenticated, but GitHub does not provide shel
l access.
如果它Hi了你，就说用户信息配置成功了。

No2.高亮配置

$ git config --global color.ui auto
No3.别名配置

就是简化命令，如git status 可以简化为git st.个人配置如下：

$ git config --global alias.st status
$ git config --global alias.ci commit
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ps push
$ git config --global alias.pl pull
$ git config --global alias.unstage 'reset HEAD'   # 表示拉回的未暂存
$ git config --global alias.last 'log -1'           # 表示查看最后一次提交历史


# 下面表示智能个性化log查看
$ git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
上面的是针对当前项目的，如果设置 --system 则表示整个系统通用。

或者你可以这样：

$ git config -e                #打开当前配置
$ git config -e --global    #打开全局配置
$ git config -e --system        #打开系统配置

## github labels的用法

