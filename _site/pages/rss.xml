<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>刘彦玮的技术博客</title>
    <link>http://liuyanwei.jumppo.com</link>
    <description></description>
    
      <item>
        <title>新的2015年，新的开始</title>
        <link>http://liuyanwei.jumppo.com/2015/04/05/new-life-in2015.html</link>
        <guid isPermaLink="true">http://liuyanwei.jumppo.com/2015/04/05/new-life-in2015.html</guid>
        <pubDate>Sun, 05 Apr 2015 00:00:00 +0800</pubDate>
        <description>&lt;blockquote&gt;
&lt;p&gt;014年我给自己规划的2需要完成的事情，第一是2015年可以有个宝宝，第二是，2015年换一份新的工作...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;完成目标&lt;/h2&gt;

&lt;p&gt;幸运的是，2月份我换了新工作，并且老婆也怀孕了，9月份，迎接宝宝的到到来。&lt;/p&gt;

&lt;h2&gt;新的工作&lt;/h2&gt;

&lt;p&gt;新的工作是一个很好的转型机会。2014年以前我都是些web程序，后端使用.net,2014年学习了移动端android和ios开发，做了几个项目后，
我更喜欢移动端的开发，工作一直是我的兴趣，我也跟着自己的兴趣走。新的工作，ios开发我觉得很有趣。 27寸的imac也让我代码写起来很爽。
朝九晚五的工作也让我有了更多学习和陪自己家人的时间，一个好的开始。&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>IOS蓝牙的开发专题</title>
        <link>http://liuyanwei.jumppo.com/2015/04/04/ios-BLE-2.html</link>
        <guid isPermaLink="true">http://liuyanwei.jumppo.com/2015/04/04/ios-BLE-2.html</guid>
        <pubDate>Sat, 04 Apr 2015 00:00:00 +0800</pubDate>
        <description>&lt;h1&gt;IOS蓝牙使用&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;最近做一个ios蓝牙设备的项目，需要用ios连接外部蓝牙设备，就对ios蓝牙相关技术做了一些研究，主要分为下面几个专题&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;（一）蓝牙相关基础知识&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- 蓝牙常见名称和缩写
- 蓝牙基础支持
- ios蓝牙和版本之前的关系
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;ios与蓝牙设备的使用&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1 建立中心角色
2 扫描外设（discover）
3 连接外设(connect)
4 扫描外设中的服务和特征(discover)
5 与外设做数据交互(explore and interact)
    -读数据
    -读描述
    -写数据
    -订阅数据
6 断开连接(disconnect)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;（一）蓝牙相关基础知识&lt;/h1&gt;

&lt;h5&gt;蓝牙常见名称和缩写&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- MFI ======= make for ipad ,iphone, itouch
&amp;gt; 专们为苹果设备制作的设备

- BLE ==== buletouch low energy，蓝牙4.0设备因为低耗电，所以也叫做BLE
- peripheral,central == 外设和中心,发起连接的时central，被连接的设备为perilheral
- service and characteristic === 服务和特征
&amp;gt; 每个设备会提供服务和特征，类似于服务端的api，但是机构不同。每个外设会有很多服务，每个服务中包含很多字段，这些字段的权限一般分为
读read，写write，通知notiy几种，就是我们连接设备后具体需要回去的内容。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;MFI === ExternalAccessory 框架
4.0 BLE  === CoreBluetooth 框架&lt;/p&gt;

&lt;h5&gt;蓝牙基础支持&lt;/h5&gt;

&lt;h5&gt;蓝牙和版本之前的关系&lt;/h5&gt;
</description>
      </item>
    
      <item>
        <title>IOS蓝牙的开发专题</title>
        <link>http://liuyanwei.jumppo.com/2015/04/04/ios-BLE-1.html</link>
        <guid isPermaLink="true">http://liuyanwei.jumppo.com/2015/04/04/ios-BLE-1.html</guid>
        <pubDate>Sat, 04 Apr 2015 00:00:00 +0800</pubDate>
        <description>&lt;h1&gt;IOS蓝牙使用&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;最近做一个ios蓝牙设备的项目，需要用ios连接外部蓝牙设备，就对ios蓝牙相关技术做了一些研究，主要分为下面几个专题&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;蓝牙相关基础知识&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- 蓝牙常见名称和缩写
- 蓝牙基础支持
- ios蓝牙和版本之前的关系
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;ios与蓝牙设备的使用&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1 建立中心角色
2 扫描外设（discover）
3 连接外设(connect)
4 扫描外设中的服务和特征(discover)
5 与外设做数据交互(explore and interact)
    -读数据
    -读描述
    -写数据
    -订阅数据
6 断开连接(disconnect)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>2015年3月的学习</title>
        <link>http://liuyanwei.jumppo.com/2015/04/01/my-2015-04.html</link>
        <guid isPermaLink="true">http://liuyanwei.jumppo.com/2015/04/01/my-2015-04.html</guid>
        <pubDate>Wed, 01 Apr 2015 00:00:00 +0800</pubDate>
        <description>&lt;blockquote&gt;
&lt;p&gt;这个月的主要工作偏前端，根据设计图输出页面，这个月也让我接触到一些前端非常不错的工具，sublime的emmet，livesytle，sass，coffeescript等等，
也总结了许多前端开发的规范和经验。也想吐槽一下，为什么java的web项目没有类似.net的razor这样的视图引擎？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;html&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;coffeescript&lt;/li&gt;
&lt;li&gt;ccs书写规范&lt;/li&gt;
&lt;li&gt;css hack&lt;/li&gt;
&lt;li&gt;smslider web工程使用的幻灯片控件，包括主从两次切换效果,并开源到github上&lt;/li&gt;
&lt;li&gt;scss的环境搭建和使用&lt;/li&gt;
&lt;li&gt;livesytle 配置和使用&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;ios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  IOS 图片拉伸&lt;/li&gt;
&lt;li&gt;  cocoa 2d 概念学习，初步了解&lt;/li&gt;
&lt;li&gt;  iOS api 对象请求&lt;/li&gt;
&lt;li&gt;  uiPageViewController使用&lt;/li&gt;
&lt;li&gt;  预编译文件的使用&lt;/li&gt;
&lt;li&gt;  预编译的常用方法&lt;/li&gt;
&lt;li&gt;  故事版高级使用&lt;/li&gt;
&lt;li&gt;  ios蓝牙通讯概念&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;java&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  java 项目tomcat的部署  mac&lt;/li&gt;
&lt;li&gt;  java oracle 和 mysql的数据库mac环境搭建&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;其他&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  linux常用命令&lt;/li&gt;
&lt;li&gt;  git的使用&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;总结&lt;/h2&gt;

&lt;p&gt;以前服务端代码写的多，前端代码写的少，经过这段时间的前端的工作，前端代码写的越来越高效和规范。&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>2015年2月的学习</title>
        <link>http://liuyanwei.jumppo.com/2015/03/01/my-2015-03.html</link>
        <guid isPermaLink="true">http://liuyanwei.jumppo.com/2015/03/01/my-2015-03.html</guid>
        <pubDate>Sun, 01 Mar 2015 00:00:00 +0800</pubDate>
        <description>&lt;blockquote&gt;
&lt;p&gt;在新公司的第一个月，用从.net转向java的我需要学习的地方有很多。这个月里我熟悉了java的web项目，maven管理，提高了ios开发水平。开发环境从window机器，迁移到了mac，
...学习的内容列表&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;android&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  android 环境配置&lt;/li&gt;
&lt;li&gt;  android 框架基础&lt;/li&gt;
&lt;li&gt;  android 常用功能开发理解&lt;/li&gt;
&lt;li&gt;  今日头条，android源码分析&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;ios开发&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  回忆ios主要环境配置，cocoa基础，fundation基础，控件基础等&lt;/li&gt;
&lt;li&gt;  常见ios第三方库等使用&lt;/li&gt;
&lt;li&gt;  SDWebImage 图片异步加载及缓存&lt;/li&gt;
&lt;li&gt;  AFNetworking&lt;/li&gt;
&lt;li&gt;  MBProgressHUD&lt;/li&gt;
&lt;li&gt;  Cocoapod环境搭建&lt;/li&gt;
&lt;li&gt;  Cocoa json对象处理&lt;/li&gt;
&lt;li&gt;  Cocoa 动画处理&lt;/li&gt;
&lt;li&gt;  Cocoa 事件处理和通知&lt;/li&gt;
&lt;li&gt;  cocoapod 的使用&lt;/li&gt;
&lt;li&gt;  AFNetworking  使用&lt;/li&gt;
&lt;li&gt;  SDWebImage 图片异步加载及缓存使用&lt;/li&gt;
&lt;li&gt;  MBProgressHUD 使用&lt;/li&gt;
&lt;li&gt;  横向滚动效果&lt;/li&gt;
&lt;li&gt;  高仿微信朋友圈效果&lt;/li&gt;
&lt;li&gt;  微信搜索框效果，点击效果和默认隐藏效果&lt;/li&gt;
&lt;li&gt;  Associative（关联）Category&lt;/li&gt;
&lt;li&gt;  objectc 基础教程&lt;/li&gt;
&lt;li&gt;  qq好友动态 “添加按钮” 点击旋转，展开按钮效果&lt;/li&gt;
&lt;li&gt;  文本输入框和键盘同时出现和消失的效果&lt;/li&gt;
&lt;li&gt;  用户登录功能开发和封装&lt;/li&gt;
&lt;li&gt;  ios静态类库的使用&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;java spring&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;spring ioc和aop原理&lt;/li&gt;
&lt;li&gt;spring controller和restaAPI的使用&lt;/li&gt;
&lt;li&gt;spring restapi开发&lt;/li&gt;
&lt;li&gt;spring maven配置&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;other&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;div + css + js 前端开发&lt;/li&gt;
&lt;li&gt;mac 开发环境配置&lt;/li&gt;
&lt;li&gt;linux&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;总结&lt;/h2&gt;

&lt;p&gt;总得说来，这一月收获丰富&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>在Github上搭建Jekyll博客和创建主题</title>
        <link>http://liuyanwei.jumppo.com/2014/02/12/how-to-deploy-a-blog-on-github-by-jekyll.html</link>
        <guid isPermaLink="true">http://liuyanwei.jumppo.com/2014/02/12/how-to-deploy-a-blog-on-github-by-jekyll.html</guid>
        <pubDate>Wed, 12 Feb 2014 00:00:00 +0800</pubDate>
        <description>&lt;blockquote&gt;
&lt;p&gt;之前本来想展开写的，后来发现Jekyll官网的教程已经非常完善了就没有多写，所以只有&lt;a href=&quot;/2013/04/23/deploy-jeklly-blog.html&quot;&gt;这篇&lt;/a&gt;。
但是过了这么久，发现很多人还是不清楚怎么搭建，所以这里打算详细写一下，并且把自己对图片的解决方案以及主题的创建步骤也一并写下。&lt;/p&gt;

&lt;p&gt;本篇主要谈如何搭建，不再讲为什么用它们。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;说明：本篇用到的代码中，为了防止解析冲突，一律多了&lt;code&gt;\&lt;/code&gt;这个来防止被误解析&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;创建一个库&lt;/h2&gt;

&lt;p&gt;在Github上新开一个库，名字叫做&lt;code&gt;username.github.io&lt;/code&gt;，然后当别人在地址栏输入相应url的时候就可以访问进来了。&lt;/p&gt;

&lt;p&gt;在这个库中完全可以只上传一个&lt;code&gt;index.html&lt;/code&gt;，来讲自己要写的东西写进去，但是这样会丧失很多灵活性，所以需要Jekyll的帮助来创建自己的博客。&lt;/p&gt;

&lt;h2&gt;设定目录结构&lt;/h2&gt;

&lt;p&gt;把自己的库clone到本地来，建立如下目录结构：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;├── CNAME
├── README.md
├── _config.yml
├── _includes
│   ├── disqus.html
│   ├── footer.html
│   ├── googleanalytics.html
│   ├── header.html
│   └── navside.html
├── _layouts
│   ├── base.html
│   ├── book.html
│   ├── page.html
│   └── post.html
├── _posts
│   ├── Book
│   ├── Life
│   ├── Resource
│   ├── Technology
│   └── Tool
├── index.html
├── pages
│   ├── about.html
│   ├── archive.html
│   └── atom.xml
├── public
│   ├── css
│   ├── fonts
│   ├── img
│   ├── js
│   └── upload
└── sitemap.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个目录结构是我自己设定的，也可以有不同的目录结构，看&lt;a href=&quot;http://jekyllrb.com/docs/structure/&quot;&gt;官网&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;接下来我主要解释这里面每一个目录的功能。&lt;/p&gt;

&lt;h3&gt;配置文件&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;_config.yml&lt;/code&gt;里写有整个站点的主要配置项，我的如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# Site settings
title: 刘彦玮的技术博客
email: coolnameismy@hotmail.com
description: &amp;gt; #刘彦玮的技术博客
baseurl: &amp;quot;&amp;quot; # the subpath of your site, e.g. /blog/
url: &amp;quot;http://yourdomain.com&amp;quot; # the base hostname &amp;amp; protocol for your site
twitter_username: coolnameismy@hotmail.com
github_username:  coolnameismy

# Build settings
#markdown: kramdown
permalink: /:year/:month/:day/:title.html   #博文的固定链接
paginate: 10                                #分页时每页博文数量
author:                                     #自定义常亮
  name: 刘彦玮
  email: coolnameismy@hotmail.com
  link: http://liuyanwei.jumppo.com/
  weibo: http://weibo.com/1897719834
  github: http://github.com/coolnameismy
title: 刘彦玮的技术博客                             #自定义常量

# avatar头像及Favicon
avatar: https://avatars1.githubusercontent.com/u/5010799?v=3&amp;amp;amp;s=460
#favicon: http://7u2ho6.com1.z0.glb.clouddn.com/site-favicon.ico

locals:                                     #自定义常量
  tags: 标签
  about: 关于
active: 技术                                 #自定义常量
subscribe_rss: /pages/atom.xml              #订阅地址
markdown: redcarpet                         #markdown解释器
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里的自定义常量可以在模板中使用，以后有修改的时候就不需要跑去改代码了。尤其是对一些私人的选项，可以在这里定义。现在我的博客中出了disqus和googleanalytics外都直接在这里设定就好了。&lt;/p&gt;

&lt;h3&gt;域名配置&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;CNAME&lt;/code&gt;这个文件写明了这个站点的域名，如果不喜欢&lt;code&gt;username.github.io&lt;/code&gt;的话，可以像我一样改掉&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;yansu.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改法只要在这个文件中写入域名就可以了。不过你需要去域名服务商那里设定域名解析规则。&lt;/p&gt;

&lt;p&gt;只要把&lt;code&gt;主机记录&lt;/code&gt;为&lt;code&gt;@&lt;/code&gt;,&lt;code&gt;www&lt;/code&gt;的记录值写成&lt;code&gt;username.github.io&lt;/code&gt;就好了。&lt;/p&gt;

&lt;h3&gt;博客存放&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;_posts&lt;/code&gt;下的所有目录中的所有博客，都会被Jekyll处理成为静态的html文件，然后放在&lt;code&gt;_site&lt;/code&gt;下。我这里没有&lt;code&gt;_site&lt;/code&gt;目录，是因为我在&lt;code&gt;.gitignore&lt;/code&gt;文件中把这个目录屏蔽掉了，它不会上传到Github上。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;_site/
_drafts/
.DS_Store
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上是我的&lt;code&gt;.gitignore&lt;/code&gt;文件内容。&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;_posts&lt;/code&gt;下的符合&lt;code&gt;YYYY-MM-DD-xxxxxx.md&lt;/code&gt;的文件，都会被Jekyll认定为博客内容。我在&lt;code&gt;_posts&lt;/code&gt;下又新建了一些文件夹，主要是方便自己本地管理博客。&lt;/p&gt;

&lt;p&gt;在上述这些文件中，必须先定义一些配置项，例如这篇博客的md文件中，开头是这样的：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;layout: post                                   #这个博客的布局文件
title: 在Github上搭建自己的Jekyll博客             #博客标题
category: 工具                                  #博客分类
tags: Jekyll                                   #博客标签
keywords: Jekyll,Github                        #自定义常量
description:                                   #自定义常量
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除了自定义常量外的必须包含进去，自定义变量在这个布局中可以访问。&lt;/p&gt;

&lt;h3&gt;模版文件&lt;/h3&gt;

&lt;p&gt;剩余的目录，基本都属于模板文件了，我解释一下各自的作用：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_includes&lt;/code&gt; 可以在模板中随时包含的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_layouts&lt;/code&gt; 布局文件，在博客头配置中可以选择&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pages&lt;/code&gt; 站内固定的页面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt; 公共资源，包括&lt;code&gt;js&lt;/code&gt;,&lt;code&gt;css&lt;/code&gt;,&lt;code&gt;img&lt;/code&gt;等，还有我博客中调用的图片，我都放这里&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index.html&lt;/code&gt; 站点的首页，整个站的入口文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sitemap.txt&lt;/code&gt; 给搜索引擎看的，如何爬取这个站&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;创建自己的主题&lt;/h2&gt;

&lt;p&gt;上面讲了如何布局好站内文件结构，接下来主要就是如何创建一个自己的主题了。&lt;/p&gt;

&lt;p&gt;布局文件是整个主题最重要的文件，这些文件告诉Jekyll如何去形成一个html页面。&lt;/p&gt;

&lt;p&gt;首先我说一下我最基础的&lt;code&gt;page.html&lt;/code&gt;文件，因为它决定了入口文件&lt;code&gt;index.html&lt;/code&gt;的布局。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;layout: base

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;row&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;col-md-12 aside3-title&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#identifier&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{\{ page.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;col-md-12 aside3-content&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;page-content&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      {\{ content }}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    {\% include disqus.html %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从这里可以看到这个文件写起来一点都不复杂，但是为什么开头还有个&lt;code&gt;layout&lt;/code&gt;呢？因为它也不是最基本的布局文件，最基本的是&lt;code&gt;base.html&lt;/code&gt;，我们看一下它的内容。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  {\% include header.html %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;row&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      {\% include navside.html %}
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;col-md-8 col-lg-8 col-sm-12 col-xs-12 aside3&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pjax&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            {\{ content }}
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  {\% include footer.html %}
  {\% include googleanalytics.html %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个文件就更像一个HTML文件了，用PHP或者Python写过web应用的人看到&lt;code&gt;{\% %}&lt;/code&gt;这样的标签应该不陌生，这不就是模板标签嘛。其实Jekyll也是借用了一下模板系统的，官网说明在&lt;a href=&quot;http://jekyllrb.com/docs/templates/&quot;&gt;这里&lt;/a&gt;，看到开头第一句讲的它用了&lt;a href=&quot;http://docs.shopify.com/themes/liquid-basics&quot;&gt;Liquid&lt;/a&gt;了吧。如果Jekyll的文档不能满足你的话，可以去Liquid那里查查。&lt;/p&gt;

&lt;p&gt;我解释一下&lt;code&gt;base.html&lt;/code&gt;中几个标签的功能。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{\% include header.html %}&lt;/code&gt; 从&lt;code&gt;_includes&lt;/code&gt;中把&lt;code&gt;header.html&lt;/code&gt;包含进来放在这里&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{\% include navside.html %}&lt;/code&gt; 同上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{\{ content }}&lt;/code&gt; 这句的作用是将继承这个Layout的文件中的代码，放在这里&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以再看&lt;code&gt;page.html&lt;/code&gt;文件就很容易了，它就是把配置项下面的内容，填补到&lt;code&gt;base.html&lt;/code&gt;中的&lt;code&gt;{\{ content }}&lt;/code&gt;处形成了一个文件。那么&lt;code&gt;page.html&lt;/code&gt;中的&lt;code&gt;{\{ content }}&lt;/code&gt;做什么用呢？因为别人也可以以&lt;code&gt;page.html&lt;/code&gt;来作为自己的布局文件。&lt;/p&gt;

&lt;p&gt;入口文件&lt;code&gt;index.html&lt;/code&gt;就是这么干的：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;layout: page
title: 首页
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里看到选择了page作为布局文件，那么title干嘛用的呢？其实它是在被包含的&lt;code&gt;header.html&lt;/code&gt;中被用到了。来看看&lt;code&gt;header.html&lt;/code&gt;怎么写的：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{\{ page.title }} | {\{ site.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;刘彦玮&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{\% if page.keywords %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;keywords&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Jekyll,Github&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{\% endif %}
{\% if page.description  %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;description &amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
{\% endif %}

...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里又使用了一些新标签——&lt;code&gt;{\{ }\}&lt;/code&gt;，这个标签就是用来书写变量的，通过在配置处配置变量，或者使用系统的自定义变量，可以轻松改变页面内的一些元素或者内容。&lt;/p&gt;

&lt;p&gt;系统变量查询可以去&lt;a href=&quot;http://jekyllrb.com/docs/variables/&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其实整个主题书写就是这么简单，如果有不清楚的可以再看看官网的文档。动一动手就非常明白了。&lt;/p&gt;

&lt;h2&gt;插入图片&lt;/h2&gt;

&lt;p&gt;很多人感觉用Jekyll最不方便的就是插入图片了，其实我也是这么觉得的。所以只能自己去想些办法。&lt;/p&gt;

&lt;h3&gt;图片统一存放&lt;/h3&gt;

&lt;p&gt;图片我都放在了&lt;code&gt;/public/upload&lt;/code&gt;下，所以我在插入图片的时候只要用&lt;code&gt;![xxx](http://7u2ho6.com1.z0.glb.clouddn.com/xxx)&lt;/code&gt;就可以了。&lt;/p&gt;

&lt;h3&gt;方便的图片导入&lt;/h3&gt;

&lt;p&gt;导入图片的方式是我将&lt;code&gt;upload&lt;/code&gt;文件夹做了个软连接，放到mac的dock上就行了，有图片要用的时候直接往里面一拖。&lt;/p&gt;

&lt;h3&gt;方便的截图&lt;/h3&gt;

&lt;p&gt;很多时候图片都是现截取的，比如用QQ的截图工具，或者系统的截图工具，但是他们截取完都存放在了&lt;code&gt;user/Pictures&lt;/code&gt;里面，来回移动太累了。我这里介绍一个Mac下的一个工具——Trickster，看图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7u2ho6.com1.z0.glb.clouddn.com/tech-trickster-move-picture.png&quot; alt=&quot;移动图片&quot;&gt;&lt;/p&gt;

&lt;p&gt;这个工具可以看到刚刚修改过的图片，而且还有一个收藏的文件夹，我每次截取完图以后，从左边往右边一拖，然后在markdown中就可以继续书写了。一点都不耗时。&lt;/p&gt;

&lt;h2&gt;本地预览及提交&lt;/h2&gt;

&lt;p&gt;本地预览自己的修改很容易，只要进入&lt;code&gt;username.github.io&lt;/code&gt;目录，执行&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后访问&lt;code&gt;http://localhost:4000&lt;/code&gt;就OK了，安装Jekyll的方式自行谷歌吧...&lt;/p&gt;

&lt;p&gt;自己预览过没有问题以后，就提交到服务端吧，Git三步走&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git add xxx
git commit -m &amp;quot;xxx&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;其他&lt;/h2&gt;

&lt;p&gt;我觉得自己的这个主题设定的算是比较好修改和移植的了，如果大家有什么问题，可以尽管问。&lt;/p&gt;

&lt;p&gt;另外一些特别的功能，比如三栏、评论、谷歌分析，这些都不难，相信你稍微打开Github读一下这个主题的代码就很快明白了。&lt;/p&gt;

&lt;p&gt;代码地址戳&lt;a href=&quot;https://github.com/coolnameismy/coolnameismy.github.io&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>五中常见的开源协议整理(BSD,Apache,GPL,LGPL,MIT)</title>
        <link>http://liuyanwei.jumppo.com/2013/04/23/opensource-licenses.html</link>
        <guid isPermaLink="true">http://liuyanwei.jumppo.com/2013/04/23/opensource-licenses.html</guid>
        <pubDate>Tue, 23 Apr 2013 00:00:00 +0800</pubDate>
        <description>&lt;h2&gt;简介&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6&quot;&gt;开源软件&lt;/a&gt;(Open source software)对我们来说越来越不陌生，开源软件一方面让我们免费享用到了“免费的午餐”，另一方面有效的利用和学习开源软件，也能促进我们开发软件时的效率、提升软件质量。但是在使用和借鉴开源软件的时候，我们不得不关心一下它对使用者的诸多限制，比较常见的方式即协议授权(licence)，这些协议中明确说明了使用者应该遵循的原则。&lt;/p&gt;

&lt;p&gt;现在开源协议众多，通过&lt;a href=&quot;http://opensource.org/licenses/category&quot;&gt;Open Source Initiative&lt;/a&gt;组织批准的开源协议有50多种，本文提到的五种常见协议也在其中，而且出现频率非常频繁，我们在使用开源代码或者开放自己源代码的时候，也应该尽量选择这些协议。&lt;/p&gt;

&lt;h2&gt;五种常见开源协议&lt;/h2&gt;

&lt;h3&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/BSD%E8%AE%B8%E5%8F%AF%E8%AF%81&quot;&gt;BSD协议&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;BSD开源协议是一个给予使用者很大自由的协议。开发者可以自由使用和修改源代码，也可以讲修改后的源代码作为开源或者专有软件再发布。但是有一下几个要求：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果再发布的产品中含有源代码，则在源代码中必须带有原来代码中的BSD协议。&lt;/li&gt;
&lt;li&gt;如果再发布的只是二进制类库/软件，则需要再类库/软件的文档和版权申明中包含原有代码中的BSD协议。&lt;/li&gt;
&lt;li&gt;不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;BSD 代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache Licence 2.0&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和最终原作者的著作权，同样允许源代码修改和再发布。但是也需要遵循以下条件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;需要给代码的用户一份Apache Licence。&lt;/li&gt;
&lt;li&gt;如果修改了代码，需要再被修改的文件中说明。&lt;/li&gt;
&lt;li&gt;在衍生的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。&lt;/li&gt;
&lt;li&gt;如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以再Notice中增加自己的许可，但是不可以表现为对Apache Licence构成更改。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apache Licence也是对商业应用又好的许可。使用者也可以再需要的时候修改代码来满足并作为开源或商业产品发布/销售。&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/GNU_General_Public_License&quot;&gt;GPL&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;我们很熟悉的Linux就是采用了GPL。GPL协议和BSD, Apache Licence等鼓励代码重用的许可很不一样。GPL的出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种linux，包括商业公司的linux和linux上各种各样的由个人，组织，以及商业软件公司开发的免费软件了。&lt;/p&gt;

&lt;p&gt;GPL协议的主要内容是只要在一个软件中使用(“使用”指类库引用，修改后的代码或者衍生代码)GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。&lt;/p&gt;

&lt;p&gt;由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。&lt;/p&gt;

&lt;p&gt;其它细节如再发布的时候需要伴随GPL协议等和BSD/Apache等类似。&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://www.gnu.org/copyleft/lesser.html&quot;&gt;LGPL&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;LGPL是GPL的一个为主要为类库使用设计的开源协议。和GPL要求任何使用/修改/衍生之GPL类库的的软件必须采用GPL协议不同。LGPL允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。&lt;/p&gt;

&lt;p&gt;但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。&lt;/p&gt;

&lt;p&gt;GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://opensource.org/licenses/mit-license.php&quot;&gt;MIT&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;MIT是和BSD一样宽范的许可协议,作者只想保留版权,而无任何其他了限制。也就是说,你必须在你的发行版里包含原许可协议的声明,无论你是以二进制发布的还是以源代码发布的.&lt;/p&gt;

&lt;h2&gt;各协议分析图&lt;/h2&gt;

&lt;p&gt;乌克兰程序员Paul Bagwell，画了一张分析图，说明应该怎么选择。&lt;a href=&quot;http://www.ruanyifeng.com&quot;&gt;阮一峰&lt;/a&gt;对图进行了汉化，如下图：
&lt;img src=&quot;http://7u2ho6.com1.z0.glb.clouddn.com/tech-licence-different.png&quot; alt=&quot;协议分析图&quot;&gt;&lt;/p&gt;

&lt;h2&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.awflasher.com/blog/archives/939&quot;&gt;http://www.awflasher.com/blog/archives/939&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html&quot;&gt;http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
  </channel>
</rss>